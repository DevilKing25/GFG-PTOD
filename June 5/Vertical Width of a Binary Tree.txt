class Solution {
    public int verticalWidth(Node root) {
        if (root == null) return 0;
        int maxVLevel = 0;
        int minVLevel = 0;
        Queue<NodeLevelPair> queue = new LinkedList<>();
        queue.add(new NodeLevelPair(root, 0));
        while (!queue.isEmpty()) {
            NodeLevelPair pair = queue.poll();
            Node node = pair.node;
            int vlevel = pair.level;
            minVLevel = Math.min(minVLevel, vlevel);
            maxVLevel = Math.max(maxVLevel, vlevel);
            if (node.left != null) {
                queue.add(new NodeLevelPair(node.left, vlevel - 1));
            }
            if (node.right != null) {
                queue.add(new NodeLevelPair(node.right, vlevel + 1));
            }
        }
        return maxVLevel - minVLevel + 1;
    }
   class NodeLevelPair {
        Node node;
        int level;

        NodeLevelPair(Node node, int level) {
            this.node = node;
            this.level = level;
        }
    }
}